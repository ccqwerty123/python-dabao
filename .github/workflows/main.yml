name: Build Windows EXE

on:
  workflow_dispatch:
  push:
    paths:
      - 'py/**/*.py'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Setup dependencies cache
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install base packages
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==5.13.2 pywin32 pefile pipreqs
      shell: pwsh

    - name: 'Debug - Show current directory and files'
      run: |
        Write-Host "Current Directory: $(Get-Location)"
        Write-Host "Files in py directory:"
        Get-ChildItem py -Recurse
      shell: pwsh

    - name: Handle requirements.txt
      run: |
        Write-Host "Starting requirements.txt handling..."
        
        # 设置基础依赖列表（使用兼容的版本号）
        $baseRequirements = @(
            "Flask>=2.0.0,<3.1.0",
            "numpy>=1.21.0,<2.0.0",  # 修正版本号
            "Pillow>=9.0.0,<11.1.0",
            "PyJWT>=2.0.0,<3.0.0",
            "qrcode>=7.3.0,<9.0.0",
            "soundcard>=0.4.2,<0.5.0",
            "requests>=2.31.0,<3.0.0",
            "urllib3>=2.0.0,<3.0.0",
            "certifi>=2024.2.0",
            "charset-normalizer>=3.0.0,<4.0.0",
            "idna>=3.4,<4.0.0"
        )
        
        try {
            # 检查是否有Python文件
            $pyFiles = Get-ChildItem "py" -Filter "*.py" -Recurse
            if ($pyFiles) {
                Write-Host "Found Python files, generating requirements with pipreqs..."
                
                # 运行pipreqs并捕获输出
                $pipreqsOutput = & pipreqs "./py" --force --encoding=utf8 --savepath="./py/new_requirements.txt" 2>&1
                Write-Host "pipreqs output: $pipreqsOutput"
                
                if (Test-Path "./py/new_requirements.txt") {
                    Write-Host "Successfully generated new_requirements.txt"
                    $newReqs = Get-Content "./py/new_requirements.txt" | ForEach-Object {
                        # 提取包名，忽略版本号
                        if ($_ -match '^([^=]+)==') {
                            $packageName = $matches[1]
                            # 从baseRequirements中找到对应的行
                            $baseReqs = $baseRequirements | Where-Object { $_ -like "$packageName*" }
                            if ($baseReqs) {
                                $baseReqs
                            } else {
                                $_  # 如果在基础依赖中找不到，使用原始行
                            }
                        } else {
                            $_
                        }
                    }
                } else {
                    Write-Host "pipreqs didn't generate new_requirements.txt, using base requirements"
                    $newReqs = @()
                }
            } else {
                Write-Host "No Python files found, using base requirements"
                $newReqs = @()
            }
            
            # 合并所有依赖，确保每个包只出现一次
            $allReqs = ($newReqs + $baseRequirements) | 
                ForEach-Object { $_.Trim() } |
                Where-Object { $_ -ne "" } |
                Sort-Object |
                Get-Unique
            
            # 确保每个依赖都在新行上
            $allReqs | ForEach-Object { $_ + "`n" } | Set-Content -NoNewline "./py/requirements.txt"
            
            Write-Host "Final requirements.txt content:"
            Get-Content "./py/requirements.txt"
            
        } catch {
            Write-Host "Error occurred: $_"
            Write-Host "Using base requirements as fallback"
            $baseRequirements | Set-Content "./py/requirements.txt"
        }
      shell: pwsh

    - name: Install project dependencies
      run: |
        Write-Host "Installing dependencies from requirements.txt..."
        if (Test-Path "py/requirements.txt") {
            # 首先安装基础依赖
            pip install --upgrade pip setuptools wheel
            
            # 逐个安装依赖
            Get-Content "py/requirements.txt" | ForEach-Object {
                $package = $_.Trim()
                if ($package -ne "") {
                    Write-Host "Installing $package..."
                    $result = pip install $package 2>&1
                    if ($LASTEXITCODE -ne 0) {
                        Write-Warning "Failed to install $package with error: $result"
                        # 尝试不带版本安装
                        $packageName = ($package -split '[>=<]')[0]
                        Write-Host "Trying to install $packageName without version constraint..."
                        pip install $packageName
                    }
                }
            }
            
            Write-Host "Installed packages:"
            pip freeze
        } else {
            Write-Error "requirements.txt not found!"
            exit 1
        }
      shell: pwsh

    # [其余步骤保持不变...]
