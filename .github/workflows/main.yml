name: Build Windows EXE

on:
  workflow_dispatch:
  push:
    paths:
      - 'py/**/*.py'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create directories
      run: |
        New-Item -ItemType Directory -Force -Path py
        New-Item -ItemType Directory -Force -Path exe/original
        New-Item -ItemType Directory -Force -Path exe/compressed
      shell: pwsh
      
    - name: Check for Python files
      id: check_py
      run: |
        if (Test-Path "py/*.py") {
          Write-Host "Found Python files to process"
          echo "FOUND_PY=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "No Python files found"
          echo "FOUND_PY=false" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

    - name: Set up Python
      if: steps.check_py.outputs.FOUND_PY == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
        cache: 'pip'
    
    - name: Generate requirements
      if: steps.check_py.outputs.FOUND_PY == 'true'
      run: |
        # 安装 pipreqs
        pip install pipreqs

        # 生成 requirements.txt
        pipreqs py --force --encoding=utf8
        
        # 如果 requirements.txt 不存在，创建一个空的
        if (-not(Test-Path requirements.txt)) {
          New-Item -ItemType File -Path requirements.txt
        }
        
        # 显示依赖列表
        Write-Host "Generated requirements.txt content:"
        Get-Content requirements.txt
      shell: pwsh

    - name: Install dependencies
      if: steps.check_py.outputs.FOUND_PY == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==5.13.2 pywin32 pefile
        
        # 如果存在 requirements.txt，安装依赖
        if (Test-Path requirements.txt) {
          pip install -r requirements.txt
        }
        
        # 如果存在 requirements-base.txt，也安装它
        if (Test-Path requirements-base.txt) {
          pip install -r requirements-base.txt
        }
      shell: pwsh
    
    - name: Download UPX
      if: steps.check_py.outputs.FOUND_PY == 'true'
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip" -OutFile upx.zip
        Expand-Archive upx.zip -DestinationPath .
        Move-Item upx-*/upx.exe . -Force
        Remove-Item upx.zip -Force
        Remove-Item upx-* -Recurse -Force
      shell: pwsh
    
    - name: Build EXEs
      if: steps.check_py.outputs.FOUND_PY == 'true'
      run: |
        Get-ChildItem "py/*.py" | ForEach-Object {
          $pyFile = $_.Name
          $baseName = $_.BaseName
          Write-Host "Processing $pyFile"
          
          # Build original version
          Write-Host "Building original version..."
          pyinstaller --clean `
                     --noconfirm `
                     --onefile `
                     --name "$baseName" `
                     --distpath "exe/original" `
                     --workpath "build/original" `
                     --specpath "specs" `
                     "py/$pyFile"
          
          # Build compressed version
          Write-Host "Building compressed version..."
          pyinstaller --clean `
                     --noconfirm `
                     --onefile `
                     --upx-dir "." `
                     --name "$baseName" `
                     --distpath "exe/compressed" `
                     --workpath "build/compressed" `
                     --specpath "specs" `
                     "py/$pyFile"
          
          # Check if builds were successful
          $origExe = "exe/original/$baseName.exe"
          $compExe = "exe/compressed/$baseName.exe"
          
          if (Test-Path $origExe -and Test-Path $compExe) {
            $origSize = (Get-Item $origExe).Length/1MB
            $compSize = (Get-Item $compExe).Length/1MB
            $ratio = 100 - ($compSize/$origSize*100)
            
            Write-Host "Build successful for $baseName"
            Write-Host "Original size: $([math]::Round($origSize, 2)) MB"
            Write-Host "Compressed size: $([math]::Round($compSize, 2)) MB"
            Write-Host "Compression ratio: $([math]::Round($ratio, 1))%"
          } else {
            Write-Error "Build failed for $baseName"
            exit 1
          }
        }
      shell: pwsh
    
    - name: Commit changes
      if: steps.check_py.outputs.FOUND_PY == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add exe/original/*.exe
        git add exe/compressed/*.exe
        if (git status --porcelain) {
          git commit -m "Update EXE files [skip ci]"
          git push
        } else {
          Write-Host "No changes to commit"
        }
      shell: pwsh
