name: Build Windows EXE

on:
  workflow_dispatch:
  push:
    paths:
      - 'py/**/*.py'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Setup dependencies cache
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install base packages
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==5.13.2 pywin32 pefile pipreqs
      shell: pwsh

    - name: Generate new requirements.txt
      run: |
        Write-Host "Generating new requirements.txt..."
        pipreqs py --force --output py/new_requirements.txt || {
          Write-Error "Failed to generate requirements.txt"
          exit 1
        }
        # 检查生成的新 requirements.txt 是否存在
        if (Test-Path "py/new_requirements.txt") {
          Write-Host "Generated new requirements.txt successfully."
          Get-Content py/new_requirements.txt  # 输出生成的 requirements.txt 内容
        } else {
          Write-Error "new_requirements.txt not found after generation."
          exit 1
        }
      shell: pwsh

    - name: Merge requirements.txt
      run: |
        if (Test-Path "py/requirements.txt") {
          Write-Host "Merging existing requirements.txt with new requirements..."
          # 读取现有的 requirements.txt
          $existingRequirements = Get-Content py/requirements.txt
          # 读取新生成的 requirements.txt
          $newRequirements = Get-Content py/new_requirements.txt

          # 去重并合并
          $mergedRequirements = ($existingRequirements + $newRequirements) | Select-Object -Unique
          # 保存合并后的结果
          $mergedRequirements | Set-Content py/requirements.txt
        } else {
          Write-Host "No existing requirements.txt found, using new one."
          Move-Item py/new_requirements.txt py/requirements.txt -Force  # 如果没有现有文件，直接使用新文件
        }
      shell: pwsh

    - name: Install project dependencies
      run: |
        if (Test-Path "py/requirements.txt") {
          Write-Host "Installing dependencies from requirements.txt..."
          pip install -r py/requirements.txt --upgrade
          pip freeze  # 输出已安装库的列表
        } else {
          Write-Host "No requirements.txt file found, skipping dependency installation."
        }
      shell: pwsh

    - name: Setup build environment
      run: |
        # 创建必要的目录
        $dirs = @("py", "exe/original", "exe/compressed", "build", "specs")
        foreach ($dir in $dirs) {
          New-Item -ItemType Directory -Force -Path $dir
          Write-Host "Created directory: $dir"
        }

        # 下载并设置 UPX
        $upx_version = "4.2.1"
        $url = "https://github.com/upx/upx/releases/download/v${upx_version}/upx-${upx_version}-win64.zip"
        
        Invoke-WebRequest -Uri $url -OutFile upx.zip
        Expand-Archive upx.zip -DestinationPath .
        Move-Item upx-*/upx.exe . -Force
        Remove-Item upx.zip, upx-* -Recurse -Force
        
        if (Test-Path "upx.exe") {
          Write-Host "UPX installed successfully"
        } else {
          throw "Failed to install UPX"
        }
      shell: pwsh
      
    - name: Build EXEs
      run: |
        $ErrorActionPreference = 'Stop'
        
        # 检查是否有Python文件
        $pyFiles = Get-ChildItem "py/*.py" -ErrorAction SilentlyContinue | 
                  Where-Object { $_.BaseName -ne "runtime_hook" }  # 排除 runtime_hook.py
                  
        if (-not $pyFiles) {
          Write-Host "No Python files found in py directory"
          exit 0
        }
        
        foreach ($pyFile in $pyFiles) {
          $baseName = $pyFile.BaseName
          Write-Host "`nProcessing: $($pyFile.Name)"
          
          $common_args = @(
            "--clean",
            "--noconfirm",
            "--onefile",
            "--noconsole",
            "--name", $baseName,
            "--specpath", "specs",
            "py/$($pyFile.Name)"
          )
          
          # 构建原始版本
          Write-Host "`nBuilding original version..."
          $orig_args = $common_args + @(
            "--distpath", "exe/original",
            "--workpath", "build/original"
          )
          
          try {
            & pyinstaller $orig_args
            if (-not $?) { throw "PyInstaller failed" }
          }
          catch {
            Write-Error "Failed to build original version: $_"
            exit 1
          }
          
          # 构建压缩版本
          Write-Host "`nBuilding compressed version..."
          $comp_args = $common_args + @(
            "--distpath", "exe/compressed",
            "--workpath", "build/compressed",
            "--upx-dir", "."
          )
          
          try {
            & pyinstaller $comp_args
            if (-not $?) { throw "PyInstaller failed" }
          }
          catch {
            Write-Error "Failed to build compressed version: $_"
            exit 1
          }
          
          # 验证构建结果
          $origExe = "exe/original/$baseName.exe"
          $compExe = "exe/compressed/$baseName.exe"
          
          if (-not(Test-Path $origExe) -or -not(Test-Path $compExe)) {
            Write-Error "Build verification failed: Missing EXE files"
            exit 1
          }
          
          # 输出大小对比
          $origSize = (Get-Item $origExe).Length/1MB
          $compSize = (Get-Item $compExe).Length/1MB
          $ratio = 100 - ($compSize/$origSize*100)
          
          Write-Host "`nBuild Results for $baseName"
          Write-Host "Original: $([math]::Round($origSize, 2)) MB"
          Write-Host "Compressed: $([math]::Round($compSize, 2)) MB"
          Write-Host "Compression: $([math]::Round($ratio, 1))%"
        }
      shell: pwsh

    - name: Commit EXE files and updated requirements.txt
      run: |
        # 检查是否有新的exe文件
        $hasChanges = $false
        
        foreach ($dir in @("original", "compressed")) {
          $exeFiles = Get-ChildItem "exe/$dir/*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
            $hasChanges = $true
            break
          }
        }
        
        # 检查 requirements.txt 是否有更新
        if (Test-Path "py/requirements.txt") {
          $reqFileContent = Get-Content py/requirements.txt
          if ($reqFileContent) {
            $hasChanges = $true
          }
        }
        
        if ($hasChanges) {
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add exe/original/*.exe
          git add exe/compressed/*.exe
          git add py/requirements.txt  # 添加更新后的 requirements.txt
          
          git commit -m "Update EXE files and requirements.txt [skip ci]"
          git push
        } else {
          Write-Host "No new EXE files or updated requirements.txt to commit"
        }
      shell: pwsh
